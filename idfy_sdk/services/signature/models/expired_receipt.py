# coding: utf-8

"""
    Idfy.Signature

    Sign contracts, declarations, forms and other documents using digital signatures.   ## Last update   Last build date for this endpoint: 18.03.2019

"""


import pprint
import re
from typing import List, Dict
from datetime import datetime as datetime


from idfy_sdk.services.signature.models.email import Email
from idfy_sdk.services.signature.models.sms import SMS

class ExpiredReceipt(object):
    """NOTE: This class is generated by Eivind.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': List[Email],
        'sms': List[SMS]
    }

    attribute_map = {
        'email': 'email',
        'sms': 'sms'
    }

    def __init__(self, email=None, sms=None):

        self._email = None
        self._sms = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if sms is not None:
            self.sms = sms

    @property
    def email(self):
        """Gets the email of this ExpiredReceipt.

        A list of custom email texts to use for the notification. Default texts will be used if not specified.

        :return: The email of this ExpiredReceipt.
        :rtype: List[Email]
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ExpiredReceipt.

        A list of custom email texts to use for the notification. Default texts will be used if not specified.

        :param email: The email of this ExpiredReceipt.
        :type: List[Email]
        """

        self._email = email

    @property
    def sms(self):
        """Gets the sms of this ExpiredReceipt.

        A list of custom SMS texts to use for the notification. Default texts will be used if not specified.

        :return: The sms of this ExpiredReceipt.
        :rtype: List[SMS]
        """
        return self._sms

    @sms.setter
    def sms(self, sms):
        """Sets the sms of this ExpiredReceipt.

        A list of custom SMS texts to use for the notification. Default texts will be used if not specified.

        :param sms: The sms of this ExpiredReceipt.
        :type: List[SMS]
        """

        self._sms = sms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpiredReceipt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
