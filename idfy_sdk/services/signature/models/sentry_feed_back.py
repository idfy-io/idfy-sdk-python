# coding: utf-8

"""
    Idfy.Signature

    Sign contracts, declarations, forms and other documents using digital signatures.   ## Last update   Last build date for this endpoint: 18.03.2019

"""


import pprint
import re
from typing import List, Dict
from datetime import datetime as datetime


class SentryFeedBack(object):
    """NOTE: This class is generated by Eivind.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': str,
        'name': str,
        'comments': str,
        'event_id': str
    }

    attribute_map = {
        'email': 'email',
        'name': 'name',
        'comments': 'comments',
        'event_id': 'event_id'
    }

    def __init__(self, email=None, name=None, comments=None, event_id=None):

        self._email = None
        self._name = None
        self._comments = None
        self._event_id = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if name is not None:
            self.name = name
        if comments is not None:
            self.comments = comments
        if event_id is not None:
            self.event_id = event_id

    @property
    def email(self):
        """Gets the email of this SentryFeedBack.


        :return: The email of this SentryFeedBack.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SentryFeedBack.


        :param email: The email of this SentryFeedBack.
        :type: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this SentryFeedBack.


        :return: The name of this SentryFeedBack.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SentryFeedBack.


        :param name: The name of this SentryFeedBack.
        :type: str
        """

        self._name = name

    @property
    def comments(self):
        """Gets the comments of this SentryFeedBack.


        :return: The comments of this SentryFeedBack.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this SentryFeedBack.


        :param comments: The comments of this SentryFeedBack.
        :type: str
        """

        self._comments = comments

    @property
    def event_id(self):
        """Gets the event_id of this SentryFeedBack.


        :return: The event_id of this SentryFeedBack.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this SentryFeedBack.


        :param event_id: The event_id of this SentryFeedBack.
        :type: str
        """

        self._event_id = event_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SentryFeedBack):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
