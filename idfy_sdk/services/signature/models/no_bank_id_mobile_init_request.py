# coding: utf-8

"""
    Idfy.Signature

    Sign contracts, declarations, forms and other documents using digital signatures.   ## Last update   Last build date for this endpoint: 18.03.2019

"""


import pprint
import re
from typing import List, Dict
from datetime import datetime as datetime


class NoBankIdMobileInitRequest(object):
    """NOTE: This class is generated by Eivind.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_id': str,
        'language': str,
        'mobile': str,
        'date_of_birth': str
    }

    attribute_map = {
        'document_id': 'documentId',
        'language': 'language',
        'mobile': 'mobile',
        'date_of_birth': 'dateOfBirth'
    }

    def __init__(self, document_id=None, language=None, mobile=None, date_of_birth=None):

        self._document_id = None
        self._language = None
        self._mobile = None
        self._date_of_birth = None
        self.discriminator = None

        if document_id is not None:
            self.document_id = document_id
        if language is not None:
            self.language = language
        if mobile is not None:
            self.mobile = mobile
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth

    @property
    def document_id(self):
        """Gets the document_id of this NoBankIdMobileInitRequest.


        :return: The document_id of this NoBankIdMobileInitRequest.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this NoBankIdMobileInitRequest.


        :param document_id: The document_id of this NoBankIdMobileInitRequest.
        :type: str
        """

        self._document_id = document_id

    @property
    def language(self):
        """Gets the language of this NoBankIdMobileInitRequest.


        :return: The language of this NoBankIdMobileInitRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this NoBankIdMobileInitRequest.


        :param language: The language of this NoBankIdMobileInitRequest.
        :type: str
        """

        self._language = language

    @property
    def mobile(self):
        """Gets the mobile of this NoBankIdMobileInitRequest.


        :return: The mobile of this NoBankIdMobileInitRequest.
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this NoBankIdMobileInitRequest.


        :param mobile: The mobile of this NoBankIdMobileInitRequest.
        :type: str
        """

        self._mobile = mobile

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this NoBankIdMobileInitRequest.


        :return: The date_of_birth of this NoBankIdMobileInitRequest.
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this NoBankIdMobileInitRequest.


        :param date_of_birth: The date_of_birth of this NoBankIdMobileInitRequest.
        :type: str
        """

        self._date_of_birth = date_of_birth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NoBankIdMobileInitRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
