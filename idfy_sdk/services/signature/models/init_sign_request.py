# coding: utf-8

"""
    Idfy.Signature

    Sign contracts, declarations, forms and other documents using digital signatures.   ## Last update   Last build date for this endpoint: 18.03.2019

"""


import pprint
import re
from typing import List, Dict
from datetime import datetime as datetime


from idfy_sdk.services.signature.models.attachment_item import AttachmentItem
from idfy_sdk.services.signature.models.document_item import DocumentItem

class InitSignRequest(object):
    """NOTE: This class is generated by Eivind.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'session_id': str,
        'account_id': str,
        'document_id': str,
        'language': str,
        'sender_name': str,
        'sender_org_no': str,
        'sender_document_reference': str,
        'base64_data_to_sign': str,
        'document_item': DocumentItem,
        'ssn': str,
        'redirect_url': str,
        'signer_id': str,
        'attachments': List[AttachmentItem]
    }

    attribute_map = {
        'session_id': 'sessionId',
        'account_id': 'accountId',
        'document_id': 'documentId',
        'language': 'language',
        'sender_name': 'senderName',
        'sender_org_no': 'senderOrgNo',
        'sender_document_reference': 'senderDocumentReference',
        'base64_data_to_sign': 'base64DataToSign',
        'document_item': 'documentItem',
        'ssn': 'ssn',
        'redirect_url': 'redirectUrl',
        'signer_id': 'signerId',
        'attachments': 'attachments'
    }

    def __init__(self, session_id=None, account_id=None, document_id=None, language=None, sender_name=None, sender_org_no=None, sender_document_reference=None, base64_data_to_sign=None, document_item=None, ssn=None, redirect_url=None, signer_id=None, attachments=None):

        self._session_id = None
        self._account_id = None
        self._document_id = None
        self._language = None
        self._sender_name = None
        self._sender_org_no = None
        self._sender_document_reference = None
        self._base64_data_to_sign = None
        self._document_item = None
        self._ssn = None
        self._redirect_url = None
        self._signer_id = None
        self._attachments = None
        self.discriminator = None

        if session_id is not None:
            self.session_id = session_id
        if account_id is not None:
            self.account_id = account_id
        if document_id is not None:
            self.document_id = document_id
        if language is not None:
            self.language = language
        if sender_name is not None:
            self.sender_name = sender_name
        if sender_org_no is not None:
            self.sender_org_no = sender_org_no
        if sender_document_reference is not None:
            self.sender_document_reference = sender_document_reference
        if base64_data_to_sign is not None:
            self.base64_data_to_sign = base64_data_to_sign
        if document_item is not None:
            self.document_item = document_item
        if ssn is not None:
            self.ssn = ssn
        if redirect_url is not None:
            self.redirect_url = redirect_url
        if signer_id is not None:
            self.signer_id = signer_id
        if attachments is not None:
            self.attachments = attachments

    @property
    def session_id(self):
        """Gets the session_id of this InitSignRequest.


        :return: The session_id of this InitSignRequest.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this InitSignRequest.


        :param session_id: The session_id of this InitSignRequest.
        :type: str
        """

        self._session_id = session_id

    @property
    def account_id(self):
        """Gets the account_id of this InitSignRequest.


        :return: The account_id of this InitSignRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this InitSignRequest.


        :param account_id: The account_id of this InitSignRequest.
        :type: str
        """

        self._account_id = account_id

    @property
    def document_id(self):
        """Gets the document_id of this InitSignRequest.


        :return: The document_id of this InitSignRequest.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this InitSignRequest.


        :param document_id: The document_id of this InitSignRequest.
        :type: str
        """

        self._document_id = document_id

    @property
    def language(self):
        """Gets the language of this InitSignRequest.


        :return: The language of this InitSignRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this InitSignRequest.


        :param language: The language of this InitSignRequest.
        :type: str
        """

        self._language = language

    @property
    def sender_name(self):
        """Gets the sender_name of this InitSignRequest.


        :return: The sender_name of this InitSignRequest.
        :rtype: str
        """
        return self._sender_name

    @sender_name.setter
    def sender_name(self, sender_name):
        """Sets the sender_name of this InitSignRequest.


        :param sender_name: The sender_name of this InitSignRequest.
        :type: str
        """

        self._sender_name = sender_name

    @property
    def sender_org_no(self):
        """Gets the sender_org_no of this InitSignRequest.


        :return: The sender_org_no of this InitSignRequest.
        :rtype: str
        """
        return self._sender_org_no

    @sender_org_no.setter
    def sender_org_no(self, sender_org_no):
        """Sets the sender_org_no of this InitSignRequest.


        :param sender_org_no: The sender_org_no of this InitSignRequest.
        :type: str
        """

        self._sender_org_no = sender_org_no

    @property
    def sender_document_reference(self):
        """Gets the sender_document_reference of this InitSignRequest.


        :return: The sender_document_reference of this InitSignRequest.
        :rtype: str
        """
        return self._sender_document_reference

    @sender_document_reference.setter
    def sender_document_reference(self, sender_document_reference):
        """Sets the sender_document_reference of this InitSignRequest.


        :param sender_document_reference: The sender_document_reference of this InitSignRequest.
        :type: str
        """

        self._sender_document_reference = sender_document_reference

    @property
    def base64_data_to_sign(self):
        """Gets the base64_data_to_sign of this InitSignRequest.


        :return: The base64_data_to_sign of this InitSignRequest.
        :rtype: str
        """
        return self._base64_data_to_sign

    @base64_data_to_sign.setter
    def base64_data_to_sign(self, base64_data_to_sign):
        """Sets the base64_data_to_sign of this InitSignRequest.


        :param base64_data_to_sign: The base64_data_to_sign of this InitSignRequest.
        :type: str
        """

        self._base64_data_to_sign = base64_data_to_sign

    @property
    def document_item(self):
        """Gets the document_item of this InitSignRequest.


        :return: The document_item of this InitSignRequest.
        :rtype: DocumentItem
        """
        return self._document_item

    @document_item.setter
    def document_item(self, document_item):
        """Sets the document_item of this InitSignRequest.


        :param document_item: The document_item of this InitSignRequest.
        :type: DocumentItem
        """

        self._document_item = document_item

    @property
    def ssn(self):
        """Gets the ssn of this InitSignRequest.


        :return: The ssn of this InitSignRequest.
        :rtype: str
        """
        return self._ssn

    @ssn.setter
    def ssn(self, ssn):
        """Sets the ssn of this InitSignRequest.


        :param ssn: The ssn of this InitSignRequest.
        :type: str
        """

        self._ssn = ssn

    @property
    def redirect_url(self):
        """Gets the redirect_url of this InitSignRequest.


        :return: The redirect_url of this InitSignRequest.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this InitSignRequest.


        :param redirect_url: The redirect_url of this InitSignRequest.
        :type: str
        """

        self._redirect_url = redirect_url

    @property
    def signer_id(self):
        """Gets the signer_id of this InitSignRequest.


        :return: The signer_id of this InitSignRequest.
        :rtype: str
        """
        return self._signer_id

    @signer_id.setter
    def signer_id(self, signer_id):
        """Sets the signer_id of this InitSignRequest.


        :param signer_id: The signer_id of this InitSignRequest.
        :type: str
        """

        self._signer_id = signer_id

    @property
    def attachments(self):
        """Gets the attachments of this InitSignRequest.


        :return: The attachments of this InitSignRequest.
        :rtype: List[AttachmentItem]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this InitSignRequest.


        :param attachments: The attachments of this InitSignRequest.
        :type: List[AttachmentItem]
        """

        self._attachments = attachments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InitSignRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
