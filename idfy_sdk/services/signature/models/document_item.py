# coding: utf-8

"""
    Idfy.Signature

    Sign contracts, declarations, forms and other documents using digital signatures.   ## Last update   Last build date for this endpoint: 18.03.2019

"""


import pprint
import re
from typing import List, Dict
from datetime import datetime as datetime


class DocumentItem(object):
    """NOTE: This class is generated by Eivind.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': str,
        'title': str,
        'description': str,
        'external_id': str,
        'main_document': bool,
        'document_type': str,
        'sha256_hash': str
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'description': 'description',
        'external_id': 'externalId',
        'main_document': 'mainDocument',
        'document_type': 'documentType',
        'sha256_hash': 'sha256Hash'
    }

    def __init__(self, id=None, title=None, description=None, external_id=None, main_document=None, document_type=None, sha256_hash=None):

        self._id = None
        self._title = None
        self._description = None
        self._external_id = None
        self._main_document = None
        self._document_type = None
        self._sha256_hash = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if external_id is not None:
            self.external_id = external_id
        if main_document is not None:
            self.main_document = main_document
        if document_type is not None:
            self.document_type = document_type
        if sha256_hash is not None:
            self.sha256_hash = sha256_hash

    @property
    def id(self):
        """Gets the id of this DocumentItem.


        :return: The id of this DocumentItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentItem.


        :param id: The id of this DocumentItem.
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this DocumentItem.


        :return: The title of this DocumentItem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DocumentItem.


        :param title: The title of this DocumentItem.
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this DocumentItem.


        :return: The description of this DocumentItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DocumentItem.


        :param description: The description of this DocumentItem.
        :type: str
        """

        self._description = description

    @property
    def external_id(self):
        """Gets the external_id of this DocumentItem.


        :return: The external_id of this DocumentItem.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this DocumentItem.


        :param external_id: The external_id of this DocumentItem.
        :type: str
        """

        self._external_id = external_id

    @property
    def main_document(self):
        """Gets the main_document of this DocumentItem.


        :return: The main_document of this DocumentItem.
        :rtype: bool
        """
        return self._main_document

    @main_document.setter
    def main_document(self, main_document):
        """Sets the main_document of this DocumentItem.


        :param main_document: The main_document of this DocumentItem.
        :type: bool
        """

        self._main_document = main_document

    @property
    def document_type(self):
        """Gets the document_type of this DocumentItem.


        :return: The document_type of this DocumentItem.
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this DocumentItem.


        :param document_type: The document_type of this DocumentItem.
        :type: str
        """

        self._document_type = document_type

    @property
    def sha256_hash(self):
        """Gets the sha256_hash of this DocumentItem.


        :return: The sha256_hash of this DocumentItem.
        :rtype: str
        """
        return self._sha256_hash

    @sha256_hash.setter
    def sha256_hash(self, sha256_hash):
        """Sets the sha256_hash of this DocumentItem.


        :param sha256_hash: The sha256_hash of this DocumentItem.
        :type: str
        """

        self._sha256_hash = sha256_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
