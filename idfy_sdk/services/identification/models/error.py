# coding: utf-8

"""
    Idfy Identification

    This endpoint enables authentication/identification through multiple identity providers such as Norwegian BankID, Swedish BankID and NemID. ## Last update   Last build date for this endpoint: 02.04.2019

"""


import pprint
import re
from typing import List, Dict
from datetime import datetime as datetime


class Error(object):
    """NOTE: This class is generated by Eivind.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'native_error_code': str,
        'error_code': str,
        'error_message': str
    }

    attribute_map = {
        'native_error_code': 'NativeErrorCode',
        'error_code': 'ErrorCode',
        'error_message': 'ErrorMessage'
    }

    def __init__(self, native_error_code=None, error_code=None, error_message=None):

        self._native_error_code = None
        self._error_code = None
        self._error_message = None
        self.discriminator = None

        if native_error_code is not None:
            self.native_error_code = native_error_code
        if error_code is not None:
            self.error_code = error_code
        if error_message is not None:
            self.error_message = error_message

    @property
    def native_error_code(self):
        """Gets the native_error_code of this Error.

        The error code from the Identity provider

        :return: The native_error_code of this Error.
        :rtype: str
        """
        return self._native_error_code

    @native_error_code.setter
    def native_error_code(self, native_error_code):
        """Sets the native_error_code of this Error.

        The error code from the Identity provider

        :param native_error_code: The native_error_code of this Error.
        :type: str
        """

        self._native_error_code = native_error_code

    @property
    def error_code(self):
        """Gets the error_code of this Error.

        The error code for the error

        :return: The error_code of this Error.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this Error.

        The error code for the error

        :param error_code: The error_code of this Error.
        :type: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this Error.

        Error message

        :return: The error_message of this Error.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this Error.

        Error message

        :param error_message: The error_message of this Error.
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Error):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
