# coding: utf-8

"""
    Idfy Identification

    This endpoint enables authentication/identification through multiple identity providers such as Norwegian BankID, Swedish BankID and NemID. ## Last update   Last build date for this endpoint: 02.04.2019

"""


import pprint
import re
from typing import List, Dict
from datetime import datetime as datetime


from idfy_sdk.services.identification.models.error import Error

class CreateBankIDMobileResponse(object):
    """NOTE: This class is generated by Eivind.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': str,
        'merchant_ref': str,
        'error': Error,
        'ok': bool,
        'invalid_mobile_number_or_date_of_birth': bool
    }

    attribute_map = {
        'request_id': 'RequestId',
        'merchant_ref': 'MerchantRef',
        'error': 'Error',
        'ok': 'OK',
        'invalid_mobile_number_or_date_of_birth': 'InvalidMobileNumberOrDateOfBirth'
    }

    def __init__(self, request_id=None, merchant_ref=None, error=None, ok=None, invalid_mobile_number_or_date_of_birth=None):

        self._request_id = None
        self._merchant_ref = None
        self._error = None
        self._ok = None
        self._invalid_mobile_number_or_date_of_birth = None
        self.discriminator = None

        if request_id is not None:
            self.request_id = request_id
        if merchant_ref is not None:
            self.merchant_ref = merchant_ref
        if error is not None:
            self.error = error
        if ok is not None:
            self.ok = ok
        if invalid_mobile_number_or_date_of_birth is not None:
            self.invalid_mobile_number_or_date_of_birth = invalid_mobile_number_or_date_of_birth

    @property
    def request_id(self):
        """Gets the request_id of this CreateBankIDMobileResponse.

        Signere requestid used to get the reponse form server afterwards

        :return: The request_id of this CreateBankIDMobileResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CreateBankIDMobileResponse.

        Signere requestid used to get the reponse form server afterwards

        :param request_id: The request_id of this CreateBankIDMobileResponse.
        :type: str
        """

        self._request_id = request_id

    @property
    def merchant_ref(self):
        """Gets the merchant_ref of this CreateBankIDMobileResponse.

        The merchant ref to show to the end user (SNILL BANK)

        :return: The merchant_ref of this CreateBankIDMobileResponse.
        :rtype: str
        """
        return self._merchant_ref

    @merchant_ref.setter
    def merchant_ref(self, merchant_ref):
        """Sets the merchant_ref of this CreateBankIDMobileResponse.

        The merchant ref to show to the end user (SNILL BANK)

        :param merchant_ref: The merchant_ref of this CreateBankIDMobileResponse.
        :type: str
        """

        self._merchant_ref = merchant_ref

    @property
    def error(self):
        """Gets the error of this CreateBankIDMobileResponse.

        Information about error if the identification process failed. (Only set if an error occured, if not is null)

        :return: The error of this CreateBankIDMobileResponse.
        :rtype: Error
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this CreateBankIDMobileResponse.

        Information about error if the identification process failed. (Only set if an error occured, if not is null)

        :param error: The error of this CreateBankIDMobileResponse.
        :type: Error
        """

        self._error = error

    @property
    def ok(self):
        """Gets the ok of this CreateBankIDMobileResponse.

        Status if the request started without errors

        :return: The ok of this CreateBankIDMobileResponse.
        :rtype: bool
        """
        return self._ok

    @ok.setter
    def ok(self, ok):
        """Sets the ok of this CreateBankIDMobileResponse.

        Status if the request started without errors

        :param ok: The ok of this CreateBankIDMobileResponse.
        :type: bool
        """

        self._ok = ok

    @property
    def invalid_mobile_number_or_date_of_birth(self):
        """Gets the invalid_mobile_number_or_date_of_birth of this CreateBankIDMobileResponse.

        Indicates if the Mobile number of the date of birth was invalid. These could be 2 things:   1 the user does not have BankID mobile,   2. Wrong input data (the combination of mobile and date of birth does not match

        :return: The invalid_mobile_number_or_date_of_birth of this CreateBankIDMobileResponse.
        :rtype: bool
        """
        return self._invalid_mobile_number_or_date_of_birth

    @invalid_mobile_number_or_date_of_birth.setter
    def invalid_mobile_number_or_date_of_birth(self, invalid_mobile_number_or_date_of_birth):
        """Sets the invalid_mobile_number_or_date_of_birth of this CreateBankIDMobileResponse.

        Indicates if the Mobile number of the date of birth was invalid. These could be 2 things:   1 the user does not have BankID mobile,   2. Wrong input data (the combination of mobile and date of birth does not match

        :param invalid_mobile_number_or_date_of_birth: The invalid_mobile_number_or_date_of_birth of this CreateBankIDMobileResponse.
        :type: bool
        """

        self._invalid_mobile_number_or_date_of_birth = invalid_mobile_number_or_date_of_birth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateBankIDMobileResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
