# coding: utf-8

"""
    Idfy.Admin

    In this API you can manage your account details, logo, styling or manage your openid / oauth api clients. If you are a dealer you can also manage the accounts registered to this dealer.   ## Last update   Last build date for this API: 14.01.2018  

"""


import pprint
import re
from typing import List, Dict
from datetime import datetime as datetime


class Transaction(object):
    """NOTE: This class is generated by Eivind.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': str,
        'count': int,
        'customer_number': int,
        '_date': datetime,
        'description': str,
        'external_record_id': str,
        'external_ref': str,
        'id': str,
        'internal_ref': str,
        'mva_number': int,
        'product_id': str
    }

    attribute_map = {
        'account_id': 'AccountId',
        'count': 'Count',
        'customer_number': 'CustomerNumber',
        '_date': 'Date',
        'description': 'Description',
        'external_record_id': 'ExternalRecordID',
        'external_ref': 'ExternalRef',
        'id': 'ID',
        'internal_ref': 'InternalRef',
        'mva_number': 'MvaNumber',
        'product_id': 'ProductID'
    }

    def __init__(self, account_id=None, count=None, customer_number=None, _date=None, description=None, external_record_id=None, external_ref=None, id=None, internal_ref=None, mva_number=None, product_id=None):

        self._account_id = None
        self._count = None
        self._customer_number = None
        self.__date = None
        self._description = None
        self._external_record_id = None
        self._external_ref = None
        self._id = None
        self._internal_ref = None
        self._mva_number = None
        self._product_id = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if count is not None:
            self.count = count
        if customer_number is not None:
            self.customer_number = customer_number
        if _date is not None:
            self._date = _date
        if description is not None:
            self.description = description
        if external_record_id is not None:
            self.external_record_id = external_record_id
        if external_ref is not None:
            self.external_ref = external_ref
        if id is not None:
            self.id = id
        if internal_ref is not None:
            self.internal_ref = internal_ref
        if mva_number is not None:
            self.mva_number = mva_number
        if product_id is not None:
            self.product_id = product_id

    @property
    def account_id(self):
        """Gets the account_id of this Transaction.


        :return: The account_id of this Transaction.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Transaction.


        :param account_id: The account_id of this Transaction.
        :type: str
        """

        self._account_id = account_id

    @property
    def count(self):
        """Gets the count of this Transaction.

        Number of transactions for the selected date

        :return: The count of this Transaction.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Transaction.

        Number of transactions for the selected date

        :param count: The count of this Transaction.
        :type: int
        """

        self._count = count

    @property
    def customer_number(self):
        """Gets the customer_number of this Transaction.

        Uni micro customer number

        :return: The customer_number of this Transaction.
        :rtype: int
        """
        return self._customer_number

    @customer_number.setter
    def customer_number(self, customer_number):
        """Sets the customer_number of this Transaction.

        Uni micro customer number

        :param customer_number: The customer_number of this Transaction.
        :type: int
        """

        self._customer_number = customer_number

    @property
    def _date(self):
        """Gets the _date of this Transaction.


        :return: The _date of this Transaction.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Transaction.


        :param _date: The _date of this Transaction.
        :type: datetime
        """

        self.__date = _date

    @property
    def description(self):
        """Gets the description of this Transaction.

        Transaction description

        :return: The description of this Transaction.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transaction.

        Transaction description

        :param description: The description of this Transaction.
        :type: str
        """

        self._description = description

    @property
    def external_record_id(self):
        """Gets the external_record_id of this Transaction.


        :return: The external_record_id of this Transaction.
        :rtype: str
        """
        return self._external_record_id

    @external_record_id.setter
    def external_record_id(self, external_record_id):
        """Sets the external_record_id of this Transaction.


        :param external_record_id: The external_record_id of this Transaction.
        :type: str
        """

        self._external_record_id = external_record_id

    @property
    def external_ref(self):
        """Gets the external_ref of this Transaction.


        :return: The external_ref of this Transaction.
        :rtype: str
        """
        return self._external_ref

    @external_ref.setter
    def external_ref(self, external_ref):
        """Sets the external_ref of this Transaction.


        :param external_ref: The external_ref of this Transaction.
        :type: str
        """

        self._external_ref = external_ref

    @property
    def id(self):
        """Gets the id of this Transaction.

        Transaction ID

        :return: The id of this Transaction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.

        Transaction ID

        :param id: The id of this Transaction.
        :type: str
        """

        self._id = id

    @property
    def internal_ref(self):
        """Gets the internal_ref of this Transaction.


        :return: The internal_ref of this Transaction.
        :rtype: str
        """
        return self._internal_ref

    @internal_ref.setter
    def internal_ref(self, internal_ref):
        """Sets the internal_ref of this Transaction.


        :param internal_ref: The internal_ref of this Transaction.
        :type: str
        """

        self._internal_ref = internal_ref

    @property
    def mva_number(self):
        """Gets the mva_number of this Transaction.


        :return: The mva_number of this Transaction.
        :rtype: int
        """
        return self._mva_number

    @mva_number.setter
    def mva_number(self, mva_number):
        """Sets the mva_number of this Transaction.


        :param mva_number: The mva_number of this Transaction.
        :type: int
        """

        self._mva_number = mva_number

    @property
    def product_id(self):
        """Gets the product_id of this Transaction.

        Transaction Product ID

        :return: The product_id of this Transaction.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Transaction.

        Transaction Product ID

        :param product_id: The product_id of this Transaction.
        :type: str
        """

        self._product_id = product_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
